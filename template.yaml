AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  Tarako API Resource template

Globals:
  Function:
    Timeout: 3
    Runtime: python3.10

Resources:
  ApiGateway:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: tarako-api-test
      StageName: dev
      DefinitionUri:
        Bucket: !Ref S3Bucket
        Key: !Sub ${S3Dir}/${OpenApiFile}
 
  GetSectionsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/sections/
      Handler: get_list.lambda_handler
      FunctionName: get-sections
      Events:
        UsersGetEvent:
          Type: Api
          Properties:
            Path: /sections
            Method: get

  GetSectionEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/sections/
      Handler: get_entry.lambda_handler
      FunctionName: get-section-entry
      Events:
        UsersGetUserEvent:
          Type: Api
          Properties:
            Path: /sections/{section_id}
            Method: get

  GetUsersFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/users/
      Handler: get_list.lambda_handler
      FunctionName: get-users
      Events:
        UsersGetEvent:
          Type: Api
          Properties:
            Path: /users
            Method: get

  GetUserEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/users/
      Handler: get_user.lambda_handler
      FunctionName: get-user-entry
      Events:
        UsersGetUserEvent:
          Type: Api
          Properties:
            Path: /users/{user_id}
            Method: get

  TasksGetFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/tasks/
      Handler: get_list.lambda_handler
      FunctionName: get-tasks
      Events:
        TasksGetEvent:
          Type: Api
          Properties:
            Path: /tasks
            Method: get

  PostTaskFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/tasks/
      Handler: post.lambda_handler
      FunctionName: post-task
      Events:
        TasksPostEvent:
          Type: Api
          Properties:
            Path: /tasks
            Method: post

  GetTaskEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/tasks/
      Handler: get_task.lambda_handler
      FunctionName: get-task-entry
      Events:
        TasksGetTaskEvent:
          Type: Api
          Properties:
            Path: /tasks/{task_id}
            Method: get

  PutTaskEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/tasks/
      Handler: put.lambda_handler
      FunctionName: put-task-entry
      Events:
        TasksPutTaskEvent:
          Type: Api
          Properties:
            Path: /tasks/{task_id}
            Method: put

  DeleteTaskEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/tasks/
      Handler: delete.lambda_handler
      FunctionName: delete-task-entry
      Events:
        TasksDeleteTaskEvent:
          Type: Api
          Properties:
            Path: /tasks/{task_id}
            Method: delete

  GetAllUsersDiariesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/users/
      Handler: get_all_users_list.lambda_handler
      FunctionName: get-all-users-diaries
      Events:
        DiaryUsersGetEvent:
          Type: Api
          Properties:
            Path: /diary/users
            Method: get

  GetUserDiariesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/users/
      Handler: get_single_user_list.lambda_handler
      FunctionName: get-user-diaries
      Events:
        DiaryUsersGetUserEvent:
          Type: Api
          Properties:
            Path: /diary/users/{user_id}
            Method: get

  PostUserDiaryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/users/
      Handler: post_entry.lambda_handler
      FunctionName: post-user-diary
      Events:
        DiaryUsersPostUserEvent:
          Type: Api
          Properties:
            Path: /diary/users/{user_id}
            Method: post

  GetUserDiaryEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/users/
      Handler: get_entry.lambda_handler
      FunctionName: get-user-diary-entry
      Events:
        DiaryUsersGetUserDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/users/{user_id}/{diary_id}
            Method: get

  PutUserDiaryEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/users/
      Handler: put_entry.lambda_handler
      FunctionName: put_user-diary-entry
      Events:
        DiaryUsersPutUserDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/users/{user_id}/{diary_id}
            Method: put

  DeleteUserDiaryEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/users/
      Handler: delete_entry.lambda_handler
      FunctionName: delete-user-diary-entry
      Events:
        DiaryUsersDeleteUserDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/users/{user_id}/{diary_id}
            Method: delete

  GetAllSectionsDiariesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/sections/
      Handler: get_all_sections_list.lambda_handler
      FunctionName: get-all-sections-diaries
      Events:
        DiarySectionsGetEvent:
          Type: Api
          Properties:
            Path: /diary/sections
            Method: get

  GetSectionDiariesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/sections/
      Handler: get_single_section_list.lambda_handler
      FunctionName: get-section-diaries
      Events:
        DiarySectionsGetSectionEvent:
          Type: Api
          Properties:
            Path: /diary/sections/{section_id}
            Method: get

  PostSectionDiaryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/sections/
      Handler: post_entry.lambda_handler
      FunctionName: post-section-diary
      Events:
        DiarySectionsPostSectionEvent:
          Type: Api
          Properties:
            Path: /diary/sections/{section_id}
            Method: post

  GetSectionDiaryEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/sections/
      Handler: get_entry.lambda_handler
      FunctionName: get-section-diary-entry
      Events:
        DiarySectionsGetSectionDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/sections/{section_id}/{diary_id}
            Method: get

  PutSectionDiaryEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/sections/
      Handler: put_entry.lambda_handler
      FunctionName: put-section-diary-entry
      Events:
        DiarySectionsPutSectionDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/sections/{section_id}/{diary_id}
            Method: put

  DeleteSectionDiaryEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/diary/sections/
      Handler: delete_entry.lambda_handler
      FunctionName: delete-section-diary-entry
      Events:
        DiarySectionsDeleteSectionDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/sections/{section_id}/{diary_id}
            Method: delete
 
  TarakoTasksTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TasksTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 30
        WriteCapacityUnits: 30

  TarakoUserDiaryTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: UserDiaryTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 30
        WriteCapacityUnits: 30

  TarakoSectionDiaryTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: SectionDiaryTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 30
        WriteCapacityUnits: 30