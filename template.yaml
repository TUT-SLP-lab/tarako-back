AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: >-
  Tarako API Resource template

Globals:
  Function:
    Timeout: 3
    Runtime: python3.10

Parameters:
  OpenApiFile:
    Type: String
    Description: "OpenAPI file name"
    Default: openapi.yaml
  PrNumber:
    Type: String
    Description: "PR number"
    Default: 9
  S3Bucket:
    Type: String
    Description: "S3 Bucket name"
  S3Dir:
    Type: String
    Description: "S3 Directory name"
    Default: dev

Resources:
  ApiGateway:
    Type: "AWS::Serverless::Api"
    Properties:
      Name: !Sub tarako-api-${PrNumber}
      StageName: dev
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-CSRF-TOKEN'"
      # DefinitionUri:
      #   Bucket: !Sub ${S3Bucket}
      #   Key: !Sub ${S3Dir}/${OpenApiFile}

  TarakoLambdaLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      LayerName: !Sub TarakoLambdaLayer-${PrNumber}
      Description: 'Tarako Lambda Layer'
      ContentUri: ./layer/
      CompatibleRuntimes:
        - python3.10
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.10

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub LambdaExecutionRole-${PrNumber}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: '*'

  GetSectionsFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/sections/
      Handler: get_list.lambda_handler
      FunctionName: !Sub get-sections-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UsersGetEvent:
          Type: Api
          Properties:
            Path: /sections
            Method: get
            RestApiId: !Ref ApiGateway

  GetSectionEntryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/sections/
      Handler: get_entry.lambda_handler
      FunctionName: !Sub get-section-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UsersGetUserEvent:
          Type: Api
          Properties:
            Path: /sections/{section_id}
            Method: get
            RestApiId: !Ref ApiGateway
  
  PostSectionEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/sections/
      Handler: post.lambda_handler
      FunctionName: !Sub post-section-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UsersPostUserEvent:
          Type: Api
          Properties:
            Path: /sections
            Method: post
            RestApiId: !Ref ApiGateway
    
  PutSectionEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/sections/
      Handler: put.lambda_handler
      FunctionName: !Sub put-section-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UsersPutUserEvent:
          Type: Api
          Properties:
            Path: /sections/{section_id}
            Method: put
            RestApiId: !Ref ApiGateway

  GetUsersFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/users/
      Handler: get_list.lambda_handler
      FunctionName: !Sub get-users-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UsersGetEvent:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref ApiGateway

  GetUserEntryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/users/
      Handler: get_user.lambda_handler
      FunctionName: !Sub get-user-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UsersGetUserEvent:
          Type: Api
          Properties:
            Path: /users/{user_id}
            Method: get
            RestApiId: !Ref ApiGateway
  
  PostUserEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/users/
      Handler: post.lambda_handler
      FunctionName: !Sub post-user-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UsersPostUserEvent:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref ApiGateway

  PutUserEntryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: app/users/
      Handler: put.lambda_handler
      FunctionName: !Sub put-user-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UsersPutUserEvent:
          Type: Api
          Properties:
            Path: /users/{user_id}
            Method: put
            RestApiId: !Ref ApiGateway

  GetTasksFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/tasks/
      Handler: get_list.lambda_handler
      FunctionName: !Sub get-tasks-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        TasksGetEvent:
          Type: Api
          Properties:
            Path: /tasks
            Method: get
            RestApiId: !Ref ApiGateway

  PostTaskFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/tasks/
      Handler: post.lambda_handler
      FunctionName: !Sub post-task-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        TasksPostEvent:
          Type: Api
          Properties:
            Path: /tasks
            Method: post
            RestApiId: !Ref ApiGateway

  GetTaskEntryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/tasks/
      Handler: get_task.lambda_handler
      FunctionName: !Sub get-task-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        TasksGetTaskEvent:
          Type: Api
          Properties:
            Path: /tasks/{task_id}
            Method: get
            RestApiId: !Ref ApiGateway

  PutTaskEntryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/tasks/
      Handler: put.lambda_handler
      FunctionName: !Sub put-task-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        TasksPutTaskEvent:
          Type: Api
          Properties:
            Path: /tasks/{task_id}
            Method: put
            RestApiId: !Ref ApiGateway

  DeleteTaskEntryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/tasks/
      Handler: delete.lambda_handler
      FunctionName: !Sub delete-task-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        TasksDeleteTaskEvent:
          Type: Api
          Properties:
            Path: /tasks/{task_id}
            Method: delete
            RestApiId: !Ref ApiGateway

  GetAllUsersDiariesFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/users/
      Handler: get_all_users_list.lambda_handler
      FunctionName: !Sub get-all-users-diaries-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiaryUsersGetEvent:
          Type: Api
          Properties:
            Path: /diary/users
            Method: get
            RestApiId: !Ref ApiGateway

  GetUserDiariesFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/users/
      Handler: get_single_user_list.lambda_handler
      FunctionName: !Sub get-user-diaries-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiaryUsersGetUserEvent:
          Type: Api
          Properties:
            Path: /diary/users/{user_id}
            Method: get
            RestApiId: !Ref ApiGateway
      
  PostUserDiaryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/users/
      Handler: post_entry.lambda_handler
      FunctionName: !Sub post-user-diary-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiaryUsersPostUserEvent:
          Type: Api
          Properties:
            Path: /diary/users/{user_id}
            Method: post
            RestApiId: !Ref ApiGateway

  GetUserDiaryEntryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/users/
      Handler: get_entry.lambda_handler
      FunctionName: !Sub get-user-diary-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiaryUsersGetUserDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/users/{user_id}/{diary_id}
            Method: get
            RestApiId: !Ref ApiGateway

  PutUserDiaryEntryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/users/
      Handler: put_entry.lambda_handler
      FunctionName: !Sub put_user-diary-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiaryUsersPutUserDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/users/{user_id}/{diary_id}
            Method: put
            RestApiId: !Ref ApiGateway

  DeleteUserDiaryEntryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/users/
      Handler: delete_entry.lambda_handler
      FunctionName: !Sub delete-user-diary-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiaryUsersDeleteUserDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/users/{user_id}/{diary_id}
            Method: delete
            RestApiId: !Ref ApiGateway

  GetAllSectionsDiariesFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/sections/
      Handler: get_all_sections_list.lambda_handler
      FunctionName: !Sub get-all-sections-diaries-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiarySectionsGetEvent:
          Type: Api
          Properties:
            Path: /diary/sections
            Method: get
            RestApiId: !Ref ApiGateway

  GetSectionDiariesFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/sections/
      Handler: get_single_section_list.lambda_handler
      FunctionName: !Sub get-section-diaries-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiarySectionsGetSectionEvent:
          Type: Api
          Properties:
            Path: /diary/sections/{section_id}
            Method: get
            RestApiId: !Ref ApiGateway

  PostSectionDiaryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/sections/
      Handler: post_entry.lambda_handler
      FunctionName: !Sub post-section-diary-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiarySectionsPostSectionEvent:
          Type: Api
          Properties:
            Path: /diary/sections/{section_id}
            Method: post
            RestApiId: !Ref ApiGateway

  GetSectionDiaryEntryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/sections/
      Handler: get_entry.lambda_handler
      FunctionName: !Sub get-section-diary-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiarySectionsGetSectionDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/sections/{section_id}/{diary_id}
            Method: get
            RestApiId: !Ref ApiGateway

  PutSectionDiaryEntryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/sections/
      Handler: put_entry.lambda_handler
      FunctionName: !Sub put-section-diary-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiarySectionsPutSectionDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/sections/{section_id}/{diary_id}
            Method: put
            RestApiId: !Ref ApiGateway

  DeleteSectionDiaryEntryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: app/diary/sections/
      Handler: delete_entry.lambda_handler
      FunctionName: !Sub delete-section-diary-entry-${PrNumber}
      Layers:
        - !Ref TarakoLambdaLayer
      Environment:
        Variables:
          PR_NUM: !Ref PrNumber
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DiarySectionsDeleteSectionDiaryEvent:
          Type: Api
          Properties:
            Path: /diary/sections/{section_id}/{diary_id}
            Method: delete
            RestApiId: !Ref ApiGateway

  TarakoSectionTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub SectionTable-${PrNumber}
      AttributeDefinitions:
        - AttributeName: section_id
          AttributeType: N
      KeySchema:
        - AttributeName: section_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 30
        WriteCapacityUnits: 30
  
  TarakoUserTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub UserTable-${PrNumber}
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: section_id
          AttributeType: N
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 30
        WriteCapacityUnits: 30
      GlobalSecondaryIndexes:
        - IndexName: SectionIndex
          KeySchema:
            - AttributeName: section_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 30
            WriteCapacityUnits: 30

  TarakoTasksTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub TasksTable-${PrNumber}
      AttributeDefinitions:
        - AttributeName: task_id
          AttributeType: S
        - AttributeName: assigned_to
          AttributeType: S
        - AttributeName: section_id
          AttributeType: N
        - AttributeName: category
          AttributeType: S
        # - AttributeName: serious
        #   AttributeType: N
        - AttributeName: completed
          AttributeType: S
        - AttributeName: started_at
          AttributeType: S
        - AttributeName: last_status_at
          AttributeType: S
        - AttributeName: placeholder
          AttributeType: N
      KeySchema:
        - AttributeName: task_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 30
        WriteCapacityUnits: 30
      GlobalSecondaryIndexes:
        - IndexName: AssignedToIndex
          KeySchema:
            - AttributeName: assigned_to
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: CompletedIndex
          KeySchema:
            - AttributeName: completed
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: SectionIdIndex
          KeySchema:
            - AttributeName: section_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: SectionCompletedIndex
          KeySchema:
            - AttributeName: section_id
              KeyType: HASH
            - AttributeName: completed
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: StartedAtIndex
          KeySchema:
            - AttributeName: placeholder
              KeyType: HASH
            - AttributeName: started_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: LastStatusAtIndex
          KeySchema:
            - AttributeName: placeholder
              KeyType: HASH
            - AttributeName: last_status_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: UserStartedAtIndex
          KeySchema:
            - AttributeName: assigned_to
              KeyType: HASH
            - AttributeName: started_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: UserLastStatusAtIndex
          KeySchema:
            - AttributeName: assigned_to
              KeyType: HASH
            - AttributeName: last_status_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: UserStatusIndex
          KeySchema:
            - AttributeName: assigned_to
              KeyType: HASH
            - AttributeName: completed
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: CompletedStartedAtIndex
          KeySchema:
            - AttributeName: completed
              KeyType: HASH
            - AttributeName: started_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: CompletedLastStatusAtIndex
          KeySchema:
            - AttributeName: completed
              KeyType: HASH
            - AttributeName: last_status_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  TarakoUserDiaryTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub UserDiaryTable-${PrNumber}
      AttributeDefinitions:
        - AttributeName: diary_id
          AttributeType: S
        - AttributeName: date
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: serious
          AttributeType: N
      KeySchema:
        - AttributeName: diary_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 30
        WriteCapacityUnits: 30
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: UserDateIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: UserSeriousIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: serious
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  TarakoSectionDiaryTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub SectionDiaryTable-${PrNumber}
      AttributeDefinitions:
        - AttributeName: diary_id
          AttributeType: S

      KeySchema:
        - AttributeName: diary_id
          KeyType: HASH

      ProvisionedThroughput:
        ReadCapacityUnits: 30
        WriteCapacityUnits: 30

Outputs:
  ApiUrl:
    Description: 'API Gateway endpoint URL for Prod stage'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev'
